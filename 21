import React, { useState } from 'react';
import { supabase } from '../lib/supabase';
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { GeneratedVideo } from './AppLayout';
import { Wand2, Type, Layers, Palette, Loader, Plus, Upload, X, CheckCircle } from 'lucide-react';

type GenerationType = 'text' | 'frames' | 'ingredients';
type FrameMode = 'ai' | 'upload';

interface AIImage {
  id: string;
  url: string;
  prompt: string;
}

const aiImages: AIImage[] = Array.from({ length: 12 }, (_, i) => ({
    id: `ai_${i+1}`,
    url: `https://i.pravatar.cc/150?img=${i+1}`,
    prompt: `AI avatar ${i+1}`
}));

const Generator: React.FC<{ user: SupabaseUser; onVideoGenerated: (video: GeneratedVideo) => void }> = ({ user, onVideoGenerated }) => {
  const [generationType, setGenerationType] = useState<GenerationType>('text');
  const [prompt, setPrompt] = useState('');
  const [frameMode, setFrameMode] = useState<FrameMode>('ai');
  const [selectedAIImages, setSelectedAIImages] = useState<string[]>([]);
  const [uploadedFrames, setUploadedFrames] = useState<File[]>([]);
  const [syncText, setSyncText] = useState('');
  const [ingredients, setIngredients] = useState<string[]>([]);
  const [currentIngredient, setCurrentIngredient] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    setIsGenerating(true);
    
    // Simulação de chamada a API de IA
    await new Promise(resolve => setTimeout(resolve, 4000 + Math.random() * 2000));

    const newVideoData = {
      user_id: user.id,
      prompt: prompt || `Vídeo de ${generationType}`,
      thumbnail_url: `https://picsum.photos/seed/${Math.random()}/600/400`,
      video_url: 'https://videos.pexels.com/video-files/3209828/3209828-hd_1280_720_25fps.mp4',
      type: generationType,
      views: Math.floor(Math.random() * 100),
      likes: Math.floor(Math.random() * 50),
      shares: Math.floor(Math.random() * 20),
    };

    const { data, error } = await supabase
      .from('videos')
      .insert(newVideoData)
      .select();

    if (error) {
      console.error('Error saving video:', error);
      alert('Ocorreu um erro ao gerar o vídeo.');
    } else if (data) {
      onVideoGenerated(data[0] as GeneratedVideo);
    }

    setIsGenerating(false);
    // Reset form states
    setPrompt('');
    setSelectedAIImages([]);
    setUploadedFrames([]);
    setSyncText('');
    setIngredients([]);
  };

  const renderGenerator = () => {
    switch (generationType) {
      case 'text':
        return (
          <div className="space-y-4">
            <textarea value={prompt} onChange={(e) => setPrompt(e.target.value)} className="w-full h-32 bg-gray-800 border border-gray-700 rounded-lg p-4 text-white placeholder-gray-500 focus:outline-none focus:border-purple-500" placeholder="Descreva a cena que você quer criar... (ex: um astronauta a andar a cavalo na lua, cinemático)"></textarea>
          </div>
        );
      case 'frames':
        return (
          <div className="space-y-6">
            <div className="flex space-x-2 p-1 bg-gray-800 rounded-lg">
              <button onClick={() => setFrameMode('ai')} className={`w-1/2 py-2 rounded-md transition-colors ${frameMode === 'ai' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'}`}>Gerar com IA</button>
              <button onClick={() => setFrameMode('upload')} className={`w-1/2 py-2 rounded-md transition-colors ${frameMode === 'upload' ? 'bg-purple-600 text-white' : 'text-gray-300 hover:bg-gray-700'}`}>Upload</button>
            </div>
            {frameMode === 'ai' ? (
              <div className="space-y-4">
                <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-4">
                  {aiImages.map(img => (
                    <button key={img.id} onClick={() => setSelectedAIImages(prev => prev.includes(img.id) ? prev.filter(id => id !== img.id) : [...prev, img.id])} className={`relative aspect-square rounded-lg overflow-hidden border-2 ${selectedAIImages.includes(img.id) ? 'border-purple-500' : 'border-transparent'}`}>
                      <img src={img.url} alt={img.prompt} className="w-full h-full object-cover" />
                      {selectedAIImages.includes(img.id) && <div className="absolute inset-0 bg-black/50 flex items-center justify-center"><CheckCircle className="w-8 h-8 text-purple-400"/></div>}
                    </button>
                  ))}
                </div>
                <input type="text" value={syncText} onChange={(e) => setSyncText(e.target.value)} className="w-full bg-gray-800 border border-gray-700 rounded-lg p-3 text-white placeholder-gray-500" placeholder="Digite o texto para sincronização labial..." />
              </div>
            ) : (
              <div className="space-y-4">
                <label className="w-full flex flex-col items-center justify-center p-8 bg-gray-800 border-2 border-dashed border-gray-700 rounded-lg cursor-pointer hover:bg-gray-700">
                  <Upload className="w-8 h-8 text-gray-500 mb-2"/>
                  <span className="text-gray-400">Clique para fazer upload ou arraste e solte</span>
                  <input type="file" multiple className="hidden" onChange={(e) => setUploadedFrames(prev => [...prev, ...Array.from(e.target.files || [])])} />
                </label>
                {uploadedFrames.length > 0 && (
                  <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-4">
                    {uploadedFrames.map((file, i) => (
                      <div key={i} className="relative aspect-square">
                        <img src={URL.createObjectURL(file)} alt="frame" className="w-full h-full object-cover rounded-lg"/>
                        <button onClick={() => setUploadedFrames(prev => prev.filter((_, idx) => idx !== i))} className="absolute top-1 right-1 bg-black/50 p-1 rounded-full text-white"><X className="w-3 h-3"/></button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        );
      case 'ingredients':
        return (
            <div className="space-y-4">
                <div className="flex flex-wrap gap-2 p-3 bg-gray-800 border border-gray-700 rounded-lg min-h-[48px]">
                    {ingredients.map((ing, i) => (
                        <div key={i} className="flex items-center bg-purple-600/50 px-3 py-1 rounded-full text-sm">
                            <span>{ing}</span>
                            <button onClick={() => setIngredients(prev => prev.filter((_, idx) => idx !== i))} className="ml-2"><X className="w-3 h-3"/></button>
                        </div>
                    ))}
                    <input 
                        type="text" 
                        value={currentIngredient} 
                        onChange={(e) => setCurrentIngredient(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === 'Enter' && currentIngredient.trim()) {
                                e.preventDefault();
                                setIngredients(prev => [...prev, currentIngredient.trim()]);
                                setCurrentIngredient('');
                            }
                        }}
                        className="flex-1 bg-transparent focus:outline-none"
                        placeholder="Adicione ingredientes..."
                    />
                </div>
            </div>
        );
      default: return null;
    }
  };
  
  const isGenerateButtonDisabled = () => {
    if (isGenerating) return true;
    if (generationType === 'text' && !prompt.trim()) return true;
    if (generationType === 'frames' && frameMode === 'ai' && selectedAIImages.length === 0) return true;
    if (generationType === 'frames' && frameMode === 'upload' && uploadedFrames.length === 0) return true;
    if (generationType === 'ingredients' && ingredients.length === 0) return true;
    return false;
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Gerador de Vídeo</h1>
        <p className="text-gray-400">Dê vida às suas ideias. Escolha um método de geração.</p>
      </div>
      <div className="bg-gray-900/50 border border-gray-800 rounded-2xl p-6 md:p-8">
        <div className="flex border-b border-gray-700 mb-6">
          <button onClick={() => setGenerationType('text')} className={`px-4 py-3 font-medium ${generationType === 'text' ? 'text-purple-400 border-b-2 border-purple-400' : 'text-gray-500'}`}><Type className="w-5 h-5 inline mr-2"/>Texto para Vídeo</button>
          <button onClick={() => setGenerationType('frames')} className={`px-4 py-3 font-medium ${generationType === 'frames' ? 'text-purple-400 border-b-2 border-purple-400' : 'text-gray-500'}`}><Layers className="w-5 h-5 inline mr-2"/>Frames para Vídeo</button>
          <button onClick={() => setGenerationType('ingredients')} className={`px-4 py-3 font-medium ${generationType === 'ingredients' ? 'text-purple-400 border-b-2 border-purple-400' : 'text-gray-500'}`}><Palette className="w-5 h-5 inline mr-2"/>Ingredientes</button>
        </div>
        
        <div className="min-h-[200px]">
            {renderGenerator()}
        </div>

        <div className="mt-8 pt-6 border-t border-gray-700">
          <button 
            onClick={handleGenerate} 
            disabled={isGenerateButtonDisabled()}
            className="w-full md:w-auto md:px-10 py-3 bg-purple-600 text-white rounded-lg font-semibold hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {isGenerating ? (
              <>
                <Loader className="w-5 h-5 animate-spin"/>
                <span>A gerar...</span>
              </>
            ) : (
              <>
                <Wand2 className="w-5 h-5"/>
                <span>Gerar Vídeo</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Generator;
