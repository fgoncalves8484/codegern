import React, { useState, useEffect } from 'react';
import { supabase } from './lib/supabase';
import type { User as SupabaseUser } from '@supabase/supabase-js';
import { Loader, Clapperboard, ChevronRight, Mail, Lock, User, Eye, EyeOff } from 'lucide-react';
import AppLayout from './components/AppLayout';

// --- Tipos ---
type Page = 'welcome' | 'auth' | 'app';

// --- Componentes de Autenticação ---
const GoogleIcon = () => (
  <svg className="w-5 h-5" viewBox="0 0 48 48">
    <path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path>
    <path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path>
    <path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path>
    <path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571l6.19,5.238C39.902,35.636,44,30.138,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path>
  </svg>
);

const LoginForm: React.FC<{ onSwitchToRegister: () => void }> = ({ onSwitchToRegister }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) setError(error.message);
    setIsLoading(false);
  };

  const handleGoogleLogin = async () => {
    await supabase.auth.signInWithOAuth({ 
      provider: 'google',
      options: {
        redirectTo: window.location.origin
      }
    });
  };

  return (
    <div className="w-full max-w-md">
      <form onSubmit={handleLogin} className="space-y-4">
        {error && <p className="text-red-400 bg-red-900/50 p-3 rounded-lg">{error}</p>}
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">Email</label>
          <div className="relative"><Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" /><input type="email" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full bg-gray-900 border border-gray-700 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500" placeholder="seu@email.com" required /></div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-300 mb-2">Palavra-passe</label>
          <div className="relative"><Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" /><input type={showPassword ? 'text' : 'password'} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full bg-gray-900 border border-gray-700 rounded-lg pl-10 pr-12 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500" placeholder="••••••••" required /><button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">{showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}</button></div>
        </div>
        <button type="submit" disabled={isLoading} className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 transition-colors disabled:opacity-50 flex items-center justify-center space-x-2">{isLoading ? (<><Loader className="w-5 h-5 animate-spin" /><span>A entrar...</span></>) : (<span>Entrar</span>)}</button>
      </form>
      <div className="relative my-6"><div className="absolute inset-0 flex items-center"><div className="w-full border-t border-gray-700" /></div><div className="relative flex justify-center text-sm"><span className="px-2 bg-black text-gray-500">OU</span></div></div>
      <button onClick={handleGoogleLogin} className="w-full bg-gray-800 text-white py-3 px-4 rounded-lg font-semibold hover:bg-gray-700 transition-colors flex items-center justify-center space-x-3"><GoogleIcon /><span>Entrar com Google</span></button>
      <div className="mt-6 text-center"><p className="text-gray-400">Não tem conta?{' '}<button onClick={onSwitchToRegister} className="text-purple-400 hover:text-purple-300">Registar-se</button></p></div>
    </div>
  );
};

const RegisterForm: React.FC<{ onSwitchToLogin: () => void }> = ({ onSwitchToLogin }) => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [successMessage, setSuccessMessage] = useState<string | null>(null);
  
    const handleRegister = async (e: React.FormEvent) => {
      e.preventDefault();
      setIsLoading(true);
      setError(null);
      setSuccessMessage(null);
      const { error } = await supabase.auth.signUp({
        email, password, options: { data: { full_name: name }, emailRedirectTo: window.location.origin }
      });
      if (error) {
        setError(error.message);
      } else {
        setSuccessMessage('Registo efetuado! Verifique o seu email para confirmar a conta.');
        setName('');
        setEmail('');
        setPassword('');
      }
      setIsLoading(false);
    };
  
    return (
      <div className="w-full max-w-md">
        <form onSubmit={handleRegister} className="space-y-4">
          {error && <p className="text-red-400 bg-red-900/50 p-3 rounded-lg">{error}</p>}
          {successMessage && <p className="text-green-400 bg-green-900/50 p-3 rounded-lg">{successMessage}</p>}
          <div><label className="block text-sm font-medium text-gray-300 mb-2">Nome</label><div className="relative"><User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" /><input type="text" value={name} onChange={(e) => setName(e.target.value)} className="w-full bg-gray-900 border border-gray-700 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500" placeholder="O seu nome" required /></div></div>
          <div><label className="block text-sm font-medium text-gray-300 mb-2">Email</label><div className="relative"><Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" /><input type="email" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full bg-gray-900 border border-gray-700 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500" placeholder="seu@email.com" required /></div></div>
          <div><label className="block text-sm font-medium text-gray-300 mb-2">Palavra-passe</label><div className="relative"><Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" /><input type={showPassword ? 'text' : 'password'} value={password} onChange={(e) => setPassword(e.target.value)} className="w-full bg-gray-900 border border-gray-700 rounded-lg pl-10 pr-12 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500" placeholder="Pelo menos 6 caracteres" required /><button type="button" onClick={() => setShowPassword(!showPassword)} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white">{showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}</button></div></div>
          <button type="submit" disabled={isLoading} className="w-full bg-purple-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-purple-700 transition-colors disabled:opacity-50 flex items-center justify-center space-x-2">{isLoading ? (<><Loader className="w-5 h-5 animate-spin" /><span>A criar conta...</span></>) : (<span>Criar conta</span>)}</button>
        </form>
        <div className="mt-6 text-center"><p className="text-gray-400">Já tem conta?{' '}<button onClick={onSwitchToLogin} className="text-purple-400 hover:text-purple-300">Entrar</button></p></div>
      </div>
    );
};

const WelcomeScreen: React.FC<{ onStart: () => void }> = ({ onStart }) => (
    <div className="min-h-screen bg-black text-white flex flex-col items-center justify-center p-4 text-center">
      <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full flex items-center justify-center shadow-2xl shadow-purple-500/20">
        <Clapperboard className="w-12 h-12 text-white" />
      </div>
      <h1 className="text-5xl md:text-6xl font-bold mb-4">code<span className="text-purple-400">Gern</span></h1>
      <p className="text-xl text-gray-300 mb-10 max-w-2xl mx-auto">Transforme as suas ideias em vídeos espetaculares com o poder da Inteligência Artificial.</p>
      <button onClick={onStart} className="bg-purple-600 text-white py-4 px-10 rounded-full font-bold text-lg shadow-lg shadow-purple-500/30 hover:bg-purple-700 transition-all duration-300 transform hover:scale-105 flex items-center justify-center space-x-3 mx-auto">
        <span>Começar a Gerar</span><ChevronRight className="w-6 h-6" />
      </button>
    </div>
);
  
const AuthScreen: React.FC = () => {
    const [mode, setMode] = useState<'login' | 'register'>('login');
    return (
      <div className="min-h-screen bg-black text-white flex flex-col items-center justify-center p-4">
        <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full flex items-center justify-center shadow-2xl shadow-purple-500/20"><Clapperboard className="w-12 h-12 text-white" /></div>
        <h1 className="text-3xl font-bold mb-2">code<span className="text-purple-400">Gern</span></h1>
        <p className="text-gray-400 mb-8 text-center">{mode === 'login' ? 'Entre na sua conta para continuar' : 'Crie a sua conta para começar'}</p>
        {mode === 'login' ? <LoginForm onSwitchToRegister={() => setMode('register')} /> : <RegisterForm onSwitchToLogin={() => setMode('login')} />}
      </div>
    );
};

// --- Componente Principal ---
function App() {
  const [session, setSession] = useState<SupabaseUser | null>(null);
  const [page, setPage] = useState<Page>('welcome');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setSession(session?.user ?? null);
      setPage(session ? 'app' : 'welcome');
      setLoading(false);
    };
    
    getSession();

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session?.user ?? null);
      if (!session && page === 'app') {
        setPage('welcome');
      } else if (session && page !== 'app') {
        setPage('app');
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  if (loading) {
    return <div className="bg-black min-h-screen flex items-center justify-center"><Loader className="w-10 h-10 text-purple-500 animate-spin"/></div>;
  }

  if (session) {
    return <AppLayout user={session} />;
  }
  
  if (page === 'auth') {
    return <AuthScreen />;
  }

  return <WelcomeScreen onStart={() => setPage('auth')} />;
}

export default App;
